<?xml version="1.0" encoding="UTF-8"?>
<TestRun id="b497f08f-ffa5-4e11-b86a-8a462f9224b7" name="Dego@NASA 2015-05-26 02:25:37" runUser="Nasa\Dego" xmlns="http://microsoft.com/schemas/VisualStudio/TeamTest/2010">
  <TestSettings name="Локальные" id="b9f55fb9-f132-4cfc-bd35-473d24199fde">
    <Description>Это - параметры по умолчанию для локального тестового запуска.</Description>
    <Execution>
      <TestTypeSpecific />
      <AgentRule name="Execution Agents">
      </AgentRule>
    </Execution>
    <Deployment runDeploymentRoot="Dego_NASA 2015-05-26 02_25_37" />
  </TestSettings>
  <Times creation="2015-05-26T02:25:37.5167866+03:00" queuing="2015-05-26T02:25:38.5038430+03:00" start="2015-05-26T02:25:38.5738470+03:00" finish="2015-05-26T02:26:38.7122868+03:00" />
  <ResultSummary outcome="Failed">
    <Counters total="1" executed="1" error="0" failed="1" timeout="0" aborted="0" inconclusive="0" passedButRunAborted="0" notRunnable="0" notExecuted="0" disconnected="0" warning="0" passed="0" completed="0" inProgress="0" pending="0" />
  </ResultSummary>
  <TestDefinitions>
    <WebTest name="WebTest" storage="c:\users\dego\documents\visual studio 2012\projects\smarthome\webandloadtestproject\webtest.webtest" id="625ff0e2-4dee-405b-aa04-7bf6681efb45" persistedWebTest="">
      <Execution id="b5a742bf-dd79-45bb-9a9b-f7fdba0f8639" />
    </WebTest>
  </TestDefinitions>
  <TestLists>
    <TestList name="Отсутствующие в списке результаты" id="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestList name="Все загруженные результаты" id="19431567-8539-422a-85d7-44ee4e166bda" />
  </TestLists>
  <TestEntries>
    <TestEntry isTransparent="false" testId="625ff0e2-4dee-405b-aa04-7bf6681efb45" executionId="b5a742bf-dd79-45bb-9a9b-f7fdba0f8639" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
  </TestEntries>
  <Results>
    <WebTestResult executionId="b5a742bf-dd79-45bb-9a9b-f7fdba0f8639" testId="625ff0e2-4dee-405b-aa04-7bf6681efb45" testName="WebTest" computerName="NASA" duration="00:00:49.3797180" startTime="2015-05-26T02:25:38.6458512+03:00" endTime="2015-05-26T02:26:38.6712844+03:00" testType="4e7599fa-5ecb-43e9-a887-cd63cf72d207" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b5a742bf-dd79-45bb-9a9b-f7fdba0f8639">
      <Output>
        <ErrorInfo>
          <Message>0 первичных запросов, 3 зависимых запросов и 0 условных правил завершились сбоем</Message>
        </ErrorInfo>
      </Output>
      <ResultFiles>
        <ResultFile path="WebTest.webtestResult" />
      </ResultFiles>
      <TestSettings name="Локальные" id="b9f55fb9-f132-4cfc-bd35-473d24199fde">
        <Description>Это - параметры по умолчанию для локального тестового запуска.</Description>
        <Execution>
          <TestTypeSpecific>
            <WebTestRunConfiguration testTypeId="4e7599fa-5ecb-43e9-a887-cd63cf72d207">
              <Browser name="Internet Explorer 9.0" MaxConnections="6">
                <Headers>
                  <Header name="User-Agent" value="Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0)" />
                  <Header name="Accept" value="*/*" />
                  <Header name="Accept-Language" value="{{$IEAcceptLanguage}}" />
                  <Header name="Accept-Encoding" value="GZIP" />
                </Headers>
              </Browser>
            </WebTestRunConfiguration>
          </TestTypeSpecific>
          <AgentRule name="Execution Agents">
          </AgentRule>
        </Execution>
        <Deployment runDeploymentRoot="Dego_NASA 2015-05-26 02_25_37" />
      </TestSettings>
      <WebTestResultFilePath>Dego_NASA 2015-05-26 02_25_37\In\b5a742bf-dd79-45bb-9a9b-f7fdba0f8639\WebTest.webtestResult</WebTestResultFilePath>
    </WebTestResult>
  </Results>
</TestRun>